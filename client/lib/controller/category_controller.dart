import 'package:flutter_to_do_app/controller/task_controller.dart';
import 'package:flutter_to_do_app/data/models/category.dart';
import 'package:flutter_to_do_app/data/models/task.dart';
import 'package:flutter_to_do_app/data/services/category_service.dart';
import 'package:get/get.dart';

class CategoryController extends GetxController {
  var categoryList = <Category>[].obs;
  // Rxn<Category> selectedCategory = Rxn<Category>(); //toi day rui
  var selectedCategory = Rxn<Category>(); // Rxn cho ph√©p null
  final TaskController taskController = Get.find<TaskController>();
  var isLoading = false.obs;
  @override
  void onInit() {
    super.onInit();
    getCategories();
    updateAllCategoryStats();
    // ever(taskController.taskList, (_) {
    //   updateAllCategoryStats();
    // });
  }

  // ‚≠ê Th√™m method ƒë·ªÉ refresh sau login
  Future<void> refreshCategories() async {
    print("üîÑ Refreshing categories...");
    await getCategories();
    await updateAllCategoryStats();
  }

  Future<void> getCategories() async {
    try {
      isLoading.value = true; // ‚≠ê B·∫≠t loading

      var response = await CategoryService.fetchCategories();

      if (response != null && response.isNotEmpty) {
        categoryList.assignAll(response);

        // Sort ƒë·ªÉ default category l√™n ƒë·∫ßu
        categoryList.sort((a, b) {
          if ((a.isDefault ?? false) && !(b.isDefault ?? false)) return -1;
          if ((b.isDefault ?? false) && !(a.isDefault ?? false)) return 1;
          return 0;
        });

        print("‚úÖ Loaded ${categoryList.length} categories");
      } else {
        categoryList.clear();
        print("‚ö†Ô∏è Kh√¥ng c√≥ categories ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p");
      }
    } catch (e) {
      print("‚ùå Error getting categories: $e");
      categoryList.clear();
    } finally {
      isLoading.value = false; // ‚≠ê T·∫Øt loading
    }
  }

// L·∫•y t·∫•t c·∫£ danh m·ª•c t·ª´ API
  // void getCategories() async {
  //   categoryList.value = await CategoryService.fetchCategories();
  // }
  // Future<void> getCategories() async {
  //   try {
  //     // g·ªçi API
  //     // final categories = await CategoryService.fetchCategories();
  //     final categories = await CategoryService.fetchCategoriesWithStats();
  //     // for (var category in categories) {
  //     //   category.updateStats(taskController.taskList);
  //     // }
  //     categoryList.value = categories;
  //     // updateAllCategoryStats();

  //     print("Successfully loaded categories");
  //   } catch (e) {
  //     print("Failed to load categories: $e");
  //   }
  // }
  // Future<void> getCategories() async {
  //   try {
  //     var response = await CategoryService.fetchCategories();

  //     // ‚≠ê Ki·ªÉm tra null
  //     if (response != null && response.isNotEmpty) {
  //       categoryList.assignAll(response);

  //       categoryList.sort((a, b) {
  //         if ((a.isDefault ?? false) && !(b.isDefault ?? false)) return -1;
  //         if ((b.isDefault ?? false) && !(a.isDefault ?? false)) return 1;
  //         return 0;
  //       });
  //     } else {
  //       // ‚≠ê Clear list n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
  //       categoryList.clear();
  //       print("‚ö†Ô∏è Kh√¥ng c√≥ categories ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p");
  //     }
  //   } catch (e) {
  //     print("Error getting categories: $e");
  //     categoryList.clear(); // Clear khi c√≥ l·ªói
  //   }
  // }
  // Future<void> getCategories() async {
  //   try {
  //     var response = await CategoryService.fetchCategories();

  //     if (response != null) {
  //       categoryList.assignAll(response);

  //       // S·∫Øp x·∫øp: is_default = true l√™n ƒë·∫ßu, sau ƒë√≥ theo th·ª© t·ª± kh√°c
  //       categoryList.sort((a, b) {
  //         // N·∫øu a l√† default v√† b kh√¥ng ph·∫£i -> a l√™n tr∆∞·ªõc
  //         if ((a.isDefault ?? false) && !(b.isDefault ?? false)) return -1;
  //         // N·∫øu b l√† default v√† a kh√¥ng ph·∫£i -> b l√™n tr∆∞·ªõc
  //         if ((b.isDefault ?? false) && !(a.isDefault ?? false)) return 1;
  //         // N·∫øu c·∫£ hai c√πng l√† default ho·∫∑c c√πng kh√¥ng ph·∫£i -> gi·ªØ th·ª© t·ª± hi·ªán t·∫°i
  //         return 0;
  //       });
  //     }
  //   } catch (e) {
  //     print("Error getting categories: $e");
  //   }
  // }

  void updateCategoryStatsByTask(Task task) {
    final category =
        categoryList.firstWhereOrNull((c) => c.id == task.categoryId);
    if (category != null) {
      final tasksInCategory = taskController.taskList
          .where((t) => t.categoryId == category.id)
          .toList();
      category.totalCount = tasksInCategory.length;
      category.completedCount =
          tasksInCategory.where((t) => t.isCompleted).length;

      categoryList.refresh();
    }
  }

  void updateCategoryStatsById(int? categoryId) {
    final category = categoryList.firstWhereOrNull((c) => c.id == categoryId);
    if (category != null) {
      // T√≠nh l·∫°i s·ªë completed/total d·ª±a tr√™n taskController.taskList
      final tasksInCategory = taskController.taskList
          .where((t) => t.categoryId == categoryId)
          .toList();
      category.totalCount = tasksInCategory.length;
      category.completedCount =
          tasksInCategory.where((t) => t.isCompleted).length;

      categoryList.refresh(); // refresh ƒë·ªÉ sidebar c·∫≠p nh·∫≠t
    }
  }

  Future<void> updateAllCategoryStats() async {
    for (var category in categoryList) {
      final tasksInCategory = taskController.taskList
          .where((t) => t.categoryId == category.id)
          .toList();
      category.totalCount = tasksInCategory.length;
      category.completedCount =
          tasksInCategory.where((t) => t.isCompleted).length;
    }
    categoryList.refresh();
  }

  Future<void> addCategory({Category? category}) async {
    if (category == null) {
      print("Category is null");
      return;
    }

    bool success = await CategoryService.createCategory(category: category);
    if (success) {
      getCategories(); // Refresh danh s√°ch category sau khi th√™m
    }
  }

  // X√≥a category theo ID
  Future<void> deleteCategory(int categoryId) async {
    await CategoryService.deleteCategory(categoryId);
    categoryList.removeWhere((category) => category.id == categoryId);
    update(); // C·∫≠p nh·∫≠t UI
  }
}
